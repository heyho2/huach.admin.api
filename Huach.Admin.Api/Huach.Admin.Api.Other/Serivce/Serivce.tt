<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude"#>  
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Linq" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ output extension=".cs"#>
<#@ include file="..\MultipleOutputHelper.ttinclude" #>
<#
	CodeGenerationTools code = new CodeGenerationTools(this);
	MetadataLoader loader = new MetadataLoader(this);
	CodeRegion region = new CodeRegion(this, 1);

	ModelsTool modelsTool = new ModelsTool();

    var manager = Manager.Create(Host, GenerationEnvironment);  
	foreach(ModelsInfo info in modelsTool.Infos)
    {    
		var entityNames=info.Name.Split('_');
		var entityName=string.Join("",entityNames.Where(a=>!string.IsNullOrWhiteSpace(a)).Select(a=>a.Substring(0,1).ToUpper()+a.Substring(1,a.Length-1)));
		var className=entityName+"Service"; 
		var interfaceName="I"+entityName+"Service"; 
        manager.StartNewFile(className+".cs");
		var entityNameXiao= entityName.Substring(0,1).ToLower() + entityName.Substring(1);
#>
using Huach.Admin.IRepository<#= info.Space#>;
using Huach.Admin.Models<#= info.Space#>;

namespace Huach.Admin.Service<#= info.Space#>
{    
    /// <summary>
    /// <#=className#> 
    /// </summary>
    public class <#=className#>: ServiceBase<<#=entityName#>>  
    {    
		private readonly I<#=entityName#>Repository _<#=entityNameXiao#>Repository;
		public <#=className#>(I<#=entityName#>Repository <#=entityNameXiao#>Repository)
			:base(<#=entityNameXiao#>Repository)
		{
			_<#=entityNameXiao#>Repository = <#=entityNameXiao#>Repository;
		}
    }
}
    
<#
    manager.EndBlock();    
         }            
    manager.Process(true);  
#> 

<#+
public class ModelsTool
{
	public ModelsTool(string @namespace = "Huach.Admin.Models")
	{
        var classes = Assembly.LoadFrom(@"E:\Project\huach.admin.api\Huach.Admin.Api\Huach.Admin.Api.Other\bin\Debug\Huach.Admin.Models.dll").GetTypes();
        foreach (var item in classes)
        {
            if (item.BaseType.Name== "ModelBase"&&item.Name != "ModelBase")
            {
                var spaceJies = item.FullName.Split('.');
                string space;
                try
                {
                    space = spaceJies[@namespace.Split('.').Length];
                }
                catch (Exception)
                {
                    throw new Exception("谁命名空间不规范，来，我们谈谈！！");
                }
                if (space == item.Name)
                {
                    space = "";
                }
				else
				{
					space = "."+space;
				}
                _infos.Add(new ModelsInfo
                {
                    Name = item.Name,
                    Space = space,
                });
            }
        }
    }
    const string space = "Huach.Admin.{0}";
    static List<ModelsInfo> _infos = new List<ModelsInfo>();
    public List<ModelsInfo> Infos => _infos;
}
public class ModelsInfo
{
    public string Name { get; set; }
    public string Space { get; set; }
    public List<string> Propertys { get; set; }

}
#>